# -*- coding: utf-8 -*-
"""
Created on Mon Mar 25 10:30:32 2024

@author: Shin
"""
# 확장 프로그램 설치
# 설정 -> 확장프로그램 -> 웹스토어 selenium IDE chrome에 추가 (동적인 서칭자동화)
# create a new project -> 웹 주소 입력-> start recording -> ex) naver에서 -> 비트코인 -> 뉴스
# stop recording -> 해당 test 우클릭 -> export -> language(python pytest) 선택 후 export 

'''
pip install pytest
'''

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Test():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_(self):
    self.driver.get("https://www.naver.com/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "query").click()
    self.driver.find_element(By.ID, "query").send_keys("비트코인")
    self.driver.find_element(By.ID, "query").send_keys(Keys.ENTER)
    element = self.driver.find_element(By.LINK_TEXT, "지식iN")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.execute_script("window.scrollTo(0,171)")
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, "비트코인, ETF 유출액 감소에 급반등…9700만원 회복").click()
    self.vars["win6870"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win6870"])
    
#%%
# 클래스는 특정 개념을 표현만 할뿐 사용을 하려면 인스턴스를 생성해야함.
# 인스턴스 = 클래스()
test = Test()
# 메서드는 클래스가 아니라 인스턴스를 통해 호출합니다. 다음과 같이 인스턴스 뒤에 
#.(점)을 붙이고 메서드를 호출하면 됨.
# 인스턴스.메서드()
test.setup_method(test.test_)
test.test_()


