# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 11:21:36 2024

@author: Shin
"""

# 튜플(tuple) 리스트는 []안에 두개 이상의 변수를 가짐 
# 불변(immutable)[mutable한 list와 다르게 원소를 추가 또는 변수
# 정렬을 할 수 없다] 상수 리스트(list)
# 수정(추가, 삭제, 변경)을 할 수 없다
# 그 외에는 리스트와 비슷
# 장점
# - 리스트에 비해 속도 빠름 
# - 공간절약(메모리)
# 특징
# - 딕셔너리(dict) 키로 활용
# - 함수(function)의 인자로 사용
#  한번 정의되면 변형이 불가능한 타입
# - 요소가 1개인 경우 마지막 요소 뒤에 ,  붙여야 함
# - 튜플변수 = (값, )
# - 튜플변수 = (값, 값)

# 튜플 객체 생성
# -소괄호 : ()
# -소괄호 생략 가능
#특징1) 소괄호 이용해서 생성 "(, )
#"특징2) 비어있는 튜플은 ()
#특징3) 값이 하나만 있는 튜플은 (5, ) 콤마 하나 꼭 붙여야함
#특징4) 값이 중복될 수 있다.특징5) 튜플의 요소 값은 변경하거나 삭제할 수 없다.

#%%
# 빈 튜플 생성
t0 = ()
te = tuple()

print(type(t0))#  <class 'tuple'>
print(type(te))#  <class 'tuple'>
#%%
# 요소가 1개인 경우 마지막 요소 뒤에 ,  붙여야 함 
# 소괄호의 연산자 우선순위 규칙을 적용하여 튜플로 인식하지 않음
t1x = (1)
t2x = (99+1) * 2
t99 = (99,)
print(type(t1x), t1x) # <class 'int'> 1
print(type(t99), t99) # <class 'tuple'> (99,)
print(type(t2x), t2x) # <class 'int'> 200

#%%
# 요소가 2개 이상 경우는 맨 마지막 요소뒤에 콤마(,)를 붙일 필요가 없다. 
tl1 = (1,3,5)
tl2 = (1,3,5,)
print(type(tl1), tl1) # <class 'tuple'> (1, 3, 5)
print(type(tl2), tl2) # <class 'tuple'> (1, 3, 5)

#%%
# 소괄호를 생략가능 
txt = 55,
print(type(txt), txt) # <class 'tuple'> (55,)

#%%
# 한 줄에 여러 변수 선언 가능 
# unpacking : 선언된 변수는 개별 자료형을 갖게된다. (튜플아님)
# 개별변수, ... = 튜플
a, b, c = 10 , 20, 'END'
d, e, f = (a, b, c) # 튜플
x = 10 , 20, 'END',
print(type(x), ":", x) # <class 'tuple'> : (10, 20, 'END')







