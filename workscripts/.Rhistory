paste(e1, e2, e3, collapse = ".")
vdata <- unlist(str_split(data,'.'))
vdata
vdata <- unlist(str_split(data,'-'))
data <- "010-1234-5678"
vdata <- unlist(str_split(data,'-'))
vdata
ldata <- length(vdata)
ldata # 3
vdata[1] #
vdata[2]
vdata[3]
xdata <- vdata[1]
for(n in seq(2,ldata)) {
xdata <- str_c(xdata, '.')
xdata <- str_c(xdata, vdata[n])
}
xdata
seq(2,ldata)
ldata <- length(vdata)
ldata # 3
vdata[1] # "010"
vdata[2] # "1234"
vdata[3] # "5678"
seq(2,ldata)
ldata <- length(vdata)
ldata # 3
vdata[1] # "010"
vdata[2] # "1234"
vdata[3] # "5678"
seq(2,ldata) 2,3
xdata <- vdata[1] # 초기값인 010 먼저 설정
for(n in seq(2,ldata)) {  # = n in 2:ldata
cat(xdata, '\n')
xdata <- str_c(xdata, '.') # string combine
xdata <- str_c(xdata, vdata[n])
}
xdata <- vdata[1] # 초기값인 010 먼저 설정
for(n in seq(2,ldata)) {  # = n in 2:ldata
cat(xdata, '\n')
xdata <- str_c(xdata, '.') # string combine
xdata <- str_c(xdata, vdata[n])
}
data <- "010-1234-5678"
sdata <- strsplit(data, '') # <- 문자열-> 문자백터
vdata
vdata <- strsplit(data, '') # <- 문자열-> 문자백터
vdata
vdata
source("D:/WORKSPACE(SHIN)/github/MYSELF24/MYSELF24/workscripts/s20-stringr2.R", echo=TRUE)
ldata <- length(vdata)
ldata # 13
for(n in seq(1, ldata)) {
if(vdata[n] == '-') {
vdata[n] = '.'
}
}
vdata
ldata <- length(vdata)
ldata # 13
for(n in seq(1, ldata)) {
if(vdata[n] == '-') {
vdata[n] = '.'
}
}
ldata <- length(vdata)
ldata # 13
for(n in seq(1, ldata)) {
if(vdata[n] == '-') {
vdata[n] = '.'
}
}
vdata
data <- "010-1234-5678"
vdata <- unlist(strsplit(data, ''))
data <- "010-1234-5678"
vdata <- unlist(strsplit(data, '')) # <- 문자열-> 문자백터
vdata
ldata <- length(vdata)
ldata # 13
for(n in seq(1, ldata)) {
if(vdata[n] == '-') {
vdata[n] = '.'
}
}
vdata
(vdata)
class(vdata)
vdata <- paste(vdata, collapse = '') # 백터를 문자열로 변환
vdata
seq(1,ldata)
seq(3,ldata) 2,3
seq(3,ldata)
seq(2,ldata)
ldata <- length(vdata)
ldata # 3
vdata[1] # "010"
vdata[2] # "1234"
vdata[3] # "5678"
seq(2,ldata)
data <- "010-1234-5678"
vdata <- unlist(str_split(data,'-'))
vdata #  "010"  "1234" "5678"
ldata <- length(vdata)
ldata # 3
vdata[1] # "010"
vdata[2] # "1234"
vdata[3] # "5678"
seq(2,ldata)
#
str_extract(sr, "[a-z]{3}")
source("~/.active-rstudio-document", echo=TRUE)
# "abc"
# 숫자
str_extract(sr, "[0-9]{5}")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
sr <- "abcdef1324567ABCDEFGend"
# 영문 소문자가 3글자 연속해서 나오는 경우 추출
# 최초에 매칭 되는 것을 찾음
str_extract(sr, "[a-z]{3}")
# "abc"
# 숫자 연속해서 5글자가 나오는 경우 추출
str_extract(sr, "[0-9]{5}")
str_extract(sr, "[A-Z]{3}")
str_extract(sr, "[A-Z]{7}")
help(str_extract)
str_extract_all(sr, "[a-z]{3}")
str_extract_all(s2,"[a-z]{3}")
s2 <- "start,hello world,Welcome to Korea,END."
str_extract_all(s2,"[a-z]{3}")
s2 <- "start,hello world,Welcome to Korea,END."
str_extract_all(s2,"[a-z]{3,}")
str_extract_all(s2,"[A-Za-z]{3,}")
str_extract_all(s2,"[A-z]{3,}"
str_extract_all(s2,"[A-z]{3,}")
name <- str_extract(s1, "[가-힝]{2,4}")
name
str_extract_all(s2,"[A-Za-z]{3,}") # "start"   "hello"   "world"   "Welcome" "Korea"   "END"  (A-Z,a-z ,따로 찍어주지않아도됨)
sr < "이름:홍길동, TEL" 010-1234-3578), EMAIL(abc@ysit.ac.kr)"
sr < "이름:홍길동, TEL" 010-1234-3578), EMAIL(abc@ysit.ac.kr)"
sr < "이름:홍길동, TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
name <- str_extract(s1, "[가-힝]{2,4}")
name
sr < "이름:홍길동, TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
name <- str_extract(s1, "[가-힣]{2,4}")
name
source("D:/WORKSPACE(SHIN)/github/MYSELF24/MYSELF24/workscripts/s21-extract1.R", echo=TRUE)
s1 < "이름:홍길동, TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
name <- str_extract(s1, "[가-힣]{2,4}")
nam
s1 < "NAME(홍길동), TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
name <- str_extract(s1, "[가-힣]{2,4}")
name
source("D:/WORKSPACE(SHIN)/github/MYSELF24/MYSELF24/workscripts/s21-extract1.R", echo=TRUE)
s1 < "NAME(홍길동), TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
NAME <- str_extract(s1, "[가-힣]{2,4}")
name <- str_extract(s1, "[가-힣]{2,4}")
tel <- str_extract(s1, "[0-9]{3}-[0-9]{4}-[0-9]{4}")
tel <- str_extract(s1, "[0-9]{3}-[0-9]{4}-[0-9]{4}")
tel
str_extract(s1, "[가-힣]{2,4}")
str_extract(s1, "[a-z]{1},@[a-z.]{1}")
s1 < "NAME(홍길동), TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
str_extract(s1, "[가-힣]{2,4}")
str_extract(s1, "[0-9]{3}-[0-9]{4}-[0-9]{4}")
str_extract(s1, "[a-z]{1},@[a-z.]{1}")
s1 < " NAME(홍길동), TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr) "
name <- str_extract(s1, "[가-힣]{2,4}")
name
str_extract(s1, "[A-Za-z0-9]{1,},@[a-z.]{1,}")
s1 < " NAME(홍길동), TEL(010-1234-3578), EMAIL(Abc99@ysit.ac.kr) "
name <- str_extract(s1, "[가-힣]{2,4}")
name
str_extract(s1, "[가-힣]{2,4}")
s1 <-  " NAME(홍길동), TEL(010-1234-3578), EMAIL(Abc99@ysit.ac.kr) "
str_extract(s1, "[가-힣]{2,4}")
str_extract(s1, "[0-9]{3}-[0-9]{4}-[0-9]{4}")
str_extract(s1, "[A-Za-z0-9]{1,},@[a-z.]{1,}")
str_extract(s1, "[A-Za-z0-9]{1,},@[a-z.]{1,}")
str_extract(s1, "[A-Za-z0-9]{1,},@,[a-z.]{1,}")
str_extract(s1, "[A-Za-z0-9]{1,},@,[a-z.]{1,}")
str_extract(s1, "[A-Za-z0-9]{1,}@[a-z.]{1,}")
#
str_extractall(pn, [0-9]{3,})
str_extractall(pn, [0-9]{3})
str_extractall(pn,"[0-9]{3}")
str_extract_all(pn,"[0-9]{3}")
pn <- 070-245-4156
str_extract_all(pn,"[0-9]{3}")
str_extract_all(pn,"[0-7]{3}-[0-5]{3}-[0-6]{4})
pn <- 070-245-4156
str_extract_all(pn,"[0-7]{3}-[0-5]{3}-[0-6]{4})
pn <- "070-245-4156"
str_extract_all(pn,"[0-7]{3}-[0-5]{3}-[0-6]{4})
pn <- "070-245-4156""
pn <- "070-245-4156""
str_extract_all(pn,"[0-7]{3} - [0-5]{3} - [0-6]{4}")
pn <- "070-245-4156"
str_extract_all(pn,"[0-9]{3} - [0-9]{3} - [0-9]{4}")
pn <- "070-245-4156"
str_extract_all(pn,"[0-9]{3} - [0-9]{3} - [0-9]{4}")
pn <- "070-245-4156"
str_extract_all(pn,"[0-9]{3} - [0-9]{3} - [0-9]{3,}")
pn <- "070-245-4156"
str_extract_all(pn,"[0-9]{3}-[0-9]{3}-[0-9]{3,}")
pn1 <- "02-1234-1234"
str_extract_all(pn1,"[0-9]{2}-[0-9]{2,}-[0-9]{2,}")
pn2 <- "02-123-1234"
str_extract_all(pn2,"[0-9]{2}-[0-9]{2,}-[0-9]{2,}")
str_extract(pn,"[0-9]{3}-[0-9]{3}-[0-9]{3,}")
str_extract_all(s, "[0-9]{6}-[0-9]{7}")
str_extract_all(s, "[0-9]{6}-[0-9]{6,}")
str_extract_all(s,"[0-9]{6,}")
s <- "020313-1123456","020313-2123456","020313-3123456","020313-4123456"
str_extract_all(s,"[0-9,]{6,}")
str_extract_all(s,"[0-9]{6,},")
s <- "020313-1123456","020313-2123456","020313-3123456","020313-4123456"
s <- "020313-1123456" "020313-2123456" "020313-3123456" "020313-4123456"
str_extract_all(s,"[0-9]{6}-[0-9]{7}")
s <- c("020313-1123456", "020313-2123456", "020313-3123456", "020313-4123456")
str_extract_all(s,"[0-9]{6}-[0-9]{7}")
str_extract(pn,"[0-9]{2,}-[0-9]{3,}-[0-9]{4}")
pn <- c("070-245-4156", "02-123-1234", "02-1234-1234")
str_extract(pn,"[0-9]{2,}-[0-9]{3,}-[0-9]{4}")
tels <- "02-123-1234", "02-1234-1234", "031-1234-5678"
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
t <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
tel <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
tel <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
#cat(tel, '\n')
tel <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
#cat(tel, '\n')
tel <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels
for (tel in tels) {
#cat(tel, '\n')
tel <- str_extract_all(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels
View(tel)
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels
for (n in 1:length(tels)) {
s <- tels[n]
#cat(tel, '\n')
tel <- str_extract_all(n, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel
tels
for (n in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(x,'\n')
}
tel
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
tels
for (n in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(x,'\n')
}
source("D:/WORKSPACE(SHIN)/github/MYSELF24/MYSELF24/workscripts/s21-extract2.R", echo=TRUE)
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (n in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(x, '\n')
}
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (n in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(x, '\n')
}
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(x, '\n')
}
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(tel, ':",x, '\n')
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(tel, ':", x, '\n')
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(tel, ':", x, \n')
}
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(tel, ':', x, \n')
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678", "010-12345-1234")
for (tel in tels) {
x <- str_extract(tel, "[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
cat(tel, ':', x, '\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract_all(reg,"[0-9]{6}-[1234][0-9]{7}")
cat(reg, '=',r,'\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract_all(reg,"[0-9]{6}-[1234][0-9]{7}")
cat(reg, ':',r,'\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract_all(reg,"[0-9]{6}-[1234][0-9]{7}")
cat(reg, ':' ,r ,'\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract_all(reg,"[0-9]{6}-[1234][0-9]{7}")
cat(reg, ':',r, '\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1234][0-9]{7}")
cat(reg, ':',r, '\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{7}")
cat(reg, ':',r, '\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{7}")
cat(reg, r, \n')
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{6}")
cat(reg, r, \n')
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{6}")
cat(reg, r, '\n')
}
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{6}")
cat(reg,':', r, '\n')
}
b2000 <- c("020313-1123456", "020313-2123456")
for(b2000s in b2000) {
s <- str_extract(b2000s,"[0-9]{6}--[1-2][0-9]{4}")
cat(b2000s,':', b2000, '\n')
}
b2000 <- c("020313-1123456", "020313-2123456")
for(b2000s in b2000) {
s <- str_extract(b2000s,"[0-9]{6}--[1-2][0-9]{4}")
cat(b2000s,':',s, '\n')
}
# [문제3]
# 2000년생 이전생 두번째 숫자의 첫자리 1,2
# 2000년생 이전생 두번째 숫자의 첫자리 3,4
b2000 <- c("020313-1123456", "020313-2123456")
for(b2000s in b2000) {
s <- str_extract(b2000s,"[0-9]{6}--[1-2][0-9]{4}")
cat(b2000s,':',s , '\n')
}
# 2000년생 이전생 두번째 숫자의 첫자리 1,2
# 2000년생 이전생 두번째 숫자의 첫자리 3,4
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567"
for(reg in regs) {
regs <- c("990131-1234567", "990131-2234567", "990131-3234567", "990131-4243567")
for(reg in regs) {
r1 <- str_extract(reg,"[0-9][0-9]{5}--[12][0-9]{6}")
r2 <- str_extract(reg,"[0-9][0-9]{5}--[34][0-9]{6}")
cat(reg,':', r1, ',' ,r2 , '\n')
}
num
source("~/.active-rstudio-document", echo=TRUE)
10
10 20 30
102030
num <- scan()
10 20 30
num
num <- scan()
10 20 30
name <- scan(what=character())
aa 10 dd
12 15 220
132
12 56
1245
sum(num)
num <- scan()
10
20
10
1020
sum(num)
10 20
df <- data.frame() # 빈 데이터 프레임 생성
df
help(scan)
name <- scan(what=character())
df <- data.frame() # 빈 데이터 프레임 생성
df
df <- edit(df)
df
df
df
data("VADeaths")
VADeaths
table(VADeaths)
View(VADeaths)
barplot(VADeaths)
barplot(VADeaths, col = rainbow(3),
xlab = "지역별 출신",
ylab ="사망율",
main = "미국 버지니아주의 하위 계층 사망비율"
barplot(VADeaths, col = rainbow(3),
barplot(VADeaths, col = rainbow(3),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
barplot(VADeaths, col = rainbow(4),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
barplot(VADeaths, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
barplot(VADeaths, col = rainbow(1),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
barplot(VADeaths, col = rainbow(3),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
barplot(VADeaths, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
# beside : TRUE, FALSE
barplot(VADeaths, beside=T, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
# beside : TRUE, FALSE
barplot(VADeaths, beside=F, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
#범례표시
legend(20, 80, c("50~54", "55~59", "60~64", "65~69", "70~74"),
fill = rainbow(5))
legend(20, 80, c("50~54", "55~59", "60~64", "65~69", "70~74"),
fill = rainbow(5))
legend(20, 70, c("50~54", "55~59", "60~64", "65~69", "70~74"),
fill = rainbow(5))
barplot(VADeaths, beside=F, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
#범례표시
legend(20, 70, c("50~54", "55~59", "60~64", "65~69", "70~74"),
fill = rainbow(5))
barplot(VADeaths, beside=T, col = rainbow(5),
xlab = "지역별 출신",
ylab ="사망율",
main="미국 버지니아주의 하위 계층 사망비율")
#범례표시
legend(20, 70, c("50~54", "55~59", "60~64", "65~69", "70~74"),
fill = rainbow(5))
student <- read.csv(file="./basic/student.csv", head=F)
student
# 한 행이 하나의 컬럼으로 처리 됨
student <- read.table(file="./basic/student.csv")
student
# sep: 컬럼의 구분자 지정, 콤마(,) csv(=,로 구분된 텍스트파일 comma-separated vales)
student1 <- read.table(file="./basic/student.csv", sep=',')
student1
# 존재하는 파일읽을 때
student <- read.table(file="./basic/student.txt")
student
edit(student)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
