is double(c1)
is.double(c1)
c1 <- c(1,2,3,4,5) #double(실수)
c2 <- c(1:5)       #integer(정수)
cn <- c(1L, 2L, 3L, 4L, 5L) #integer(l)
is.double(c1)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
c1 <- c(1,2,3,4,5) #double(실수)
c2 <- c(1:5)       #integer(정수)
cn <- c(1L, 2L, 3L, 4L, 5L) #integer(l)
is.double(c1)
is.double(c2)
is.double(cn)
c1 <- c(1,2,3,4,5) #double(실수)
c2 <- c(1:5)       #integer(정수)
cn <- c(1L, 2L, 3L, 4L, 5L) #integer(l)
is.double(c1)
is.double(c2)
is.double(cn)
is.integer(cn, c2)
is.integer(cn)
#sequence value
#seq(시작값, 종료값, 증가값)
s1 <-seq(1,10,1)　
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
#
cr1 <- c(rep(seq(2,8,2)2),10)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
cr1 <- c(rep(seq(2,8,2),2),10)
cr1 # 2 4 6 8 2 4 6 8 10
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s08-data-vector1.R", echo=TRUE)
is.double(cm2)
cm2 <- c(1L, 2L, 3)
cm2
is.double(cm2)
v <- c(1,3,5,7,9)
v # 1 3 5 7 9
v[0] #numeric(0)
v <- c(1,3,5,7,9)
v # 1 3 5 7 9
v[0] #numeric(0)
v[1] # 1
v[2] # 3
v[3] # 5
v[4] # 7
v[5] # 9
v[0]
vx <- v[0] + 10
source("~/.active-rstudio-document", echo=TRUE)
vt <- v[1] + v[2] + v[3] + v[4] + v[5]
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector2.R", echo=TRUE)
vt2 <- sum(v)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector2.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector2.R", echo=TRUE)
vl <- length(v)
ve <- v[vl]
#슬라이스
ㅍ[1:vl]
v[1:vl]
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector2.R", echo=TRUE)
# 백터(vector)
#참조: 첨자(index)는 1부터 시작
v <- c(1,3,5,7,9)
v # 1 3 5 7 9
v[0]
# 0으로 참조를 하면 #numeric(0) 값이없음을 의미
vx <- v[0] + 10 #numeric(empty)
vt <- v[1] + v[2] + v[3] + v[4] + v[5] #25
v[1] # 1
v[2] # 3
v[3] # 5
v[4] # 7
v[5] # 9
vt2 <- sum(v)
#길이 : 백터의 길이
vl <- length(v)
vl # 5 벡터의 길이는 데이터의 크기를 나타내며, 벡터 간의 거리나 유사성을 계산하는 데에 활용됩니다.
#평균
va <- sum(v) / length(v)
va # 5
#맨마지막 요소의 값
ve <- v[vl]
#슬라이스
v[1:vl] # 1 3 5 7 9
v[2:4] # 3 5 7 ( shift 아래화살표 해당 택스트 전체선택)
#상대참조( 지정한 위치에서의 해당하는 값 도출 가능)
rc <- c(2:4)
rc # 2 3 4
v[rc] # 3 5 7
# 백터(vector)
#참조: 첨자(index)는 1부터 시작
v <- c(1,3,5,7,9)
v # 1 3 5 7 9
v[0]
# 0으로 참조를 하면 #numeric(0) 값이없음을 의미
vx <- v[0] + 10 #numeric(empty)
vt <- v[1] + v[2] + v[3] + v[4] + v[5] #25
v[1] # 1
v[2] # 3
v[3] # 5
v[4] # 7
v[5] # 9
vt2 <- sum(v)
#길이 : 백터의 길이
vl <- length(v)
vl # 5 벡터의 길이는 데이터의 크기를 나타내며, 벡터 간의 거리나 유사성을 계산하는 데에 활용됩니다.
#평균
va <- sum(v) / length(v)
va # 5
#맨마지막 요소의 값
ve <- v[vl]
#슬라이스
v[1:vl] # 1 3 5 7 9
v[2:4] # 3 5 7 ( shift 아래화살표 해당 택스트 전체선택)
#상대참조( 지정한 위치에서의 해당하는 값 도출 가능)
rc <- c(2:4)
rc # 2 3 4
v[rc] # 3 5 7
v[c(1,3,5)] # 1 5 9
v10 <- c(1:10)
v10[c(2,4,6)]
v10 <- c(a:f)
v10 <- c('a':'f')
v10 <- c('a', 'b', 'c', 'd', 'e')
v10[c(1,3,5)]
v10[seq(1,length(v10),20)]
v10[seq(1,length(v10),2)]
v10[seq(1,length(v10),2)]
v10[seq(2,length(v10),2)]
v10[-3]
v10 <- v10[-length(v10)]
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector2.R", echo=TRUE)
v10 <- v10[-length(v10)]
v10 <- v10[length(v10) * -1]
v10 <- v10[-length(v10)]
v10 <- v10[-length(v10)]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- c('a', 'b', 'c', 'd', 'e')
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
v10 <- v10[length(v10) * -1]
# 알파벳 소문자 백터:
letters
ap <- letters
ap <- letters
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ace <- ap[c(1,3,5)]
ace
ace[1]
ace[2]
ace[3]
#백터에 원소를 추가
ace[10] <- 'z'
ace[10] <- 'z'
ace[10] <- 'z'
#NA로 채원진 빈 공간을 삭제
ace[-c(4:9)]
#NA로 채원진 빈 공간을 삭제
ace[-c(4:8)]
ace[1] <- 'A'
ace
ace[10]
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector4.R", echo=TRUE)
n <- c(1,3,5,7)
m <- c(3,5,9)
nm <- union(n,m)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-vector4.R", echo=TRUE)
#차집합: setdiff()
#n에는 있고 m에는 없는 데이터
ndm <- setdiff(n,m)
nmc
nmc <- c(n,m)
nmc
nmx <- setdiff(nmc, intersect(n,m))
nmx #  1 7 9
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s09-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
mx <- matrix(c(1:6))
mx <- matrix(c(1:6))
mx <- matrix(c(1:6))
mx
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
source("D:/WORKSPACE(SHIN)/R-textmining/workscripts/s010-data-matrix1.R", echo=TRUE)
